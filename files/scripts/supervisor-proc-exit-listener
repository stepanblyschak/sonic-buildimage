#!/usr/bin/env python3

import os
import signal
import sys
import syslog

from supervisor import childutils

# Each line of this file should specify either one critical process or one
# critical process group, (as defined in supervisord.conf file), in the
# following format:
#
# program:<process_name>
# group:<group_name>
CRITICAL_PROCESSES_FILE = '/etc/supervisor/critical_processes'

# The FEATURE table in config db contains auto-restart field
FEATURE_TABLE_NAME = 'FEATURE'

# Read the critical processes/group names from CRITICAL_PROCESSES_FILE


def get_critical_group_and_process_list():
    critical_group_list = []
    critical_process_list = []

    with open(CRITICAL_PROCESSES_FILE, 'r') as file:
        for line in file:
            line_info = line.strip(' \n').split(':')
            if len(line_info) != 2:
                syslog.syslog(syslog.LOG_ERR,
                              "Syntax of the line {} in critical_processes file is incorrect. Exiting...".format(line))
                sys.exit(5)

            identifier_key = line_info[0].strip()
            identifier_value = line_info[1].strip()
            if identifier_key == "group" and identifier_value:
                critical_group_list.append(identifier_value)
            elif identifier_key == "program" and identifier_value:
                critical_process_list.append(identifier_value)
            else:
                syslog.syslog(syslog.LOG_ERR,
                              "Syntax of the line {} in critical_processes file is incorrect. Exiting...".format(line))
                sys.exit(6)

    return critical_group_list, critical_process_list


def main(argv):
    critical_group_list, critical_process_list = get_critical_group_and_process_list()

    while True:
        # Transition from ACKNOWLEDGED to READY
        childutils.listener.ready()

        line = sys.stdin.readline()
        headers = childutils.get_headers(line)
        payload = sys.stdin.read(int(headers['len']))

        # Transition from READY to ACKNOWLEDGED
        childutils.listener.ok()

        # We only care about PROCESS_STATE_EXITED events
        if headers['eventname'] == 'PROCESS_STATE_EXITED':
            payload_headers, payload_data = childutils.eventdata(payload + '\n')

            expected_exit = int(payload_headers['expected'])
            processname = payload_headers['processname']
            groupname = payload_headers['groupname']

            is_critical = processname in critical_process_list or groupname in critical_group_list

            # If a critical process exited unexpectedly, terminate supervisor
            if is_critical and not expected_exit:
                MSG_FORMAT_STR = "Process {} exited unxepectedly. Terminating supervisor..."
                msg = MSG_FORMAT_STR.format(payload_headers['processname'])
                syslog.syslog(syslog.LOG_INFO, msg)
                os.kill(os.getppid(), signal.SIGTERM)


if __name__ == "__main__":
    main(sys.argv[1:])
