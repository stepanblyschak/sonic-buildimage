#!/usr/bin/env python

""" SONiC Package Manager exceptions are defined in this module. """


class PackageManagerError(Exception):
    """ Base class for exceptions generated by SONiC package manager """

    pass


class RepositoryNotFoundError(PackageManagerError):
    """ Repository not found in repository database exception """

    def __init__(self, name):
        self._name = name

    def __str__(self):
        return f'Repository {self._name} is not found in packages database'


class PackageInstallationError(PackageManagerError):
    """ Exception for package installation error. """

    pass


class PackageSonicRequirementError(PackageInstallationError):
    """ Exception for installation errors, when SONiC version requirement is not met. """

    def __init__(self, name, constraint, installed_ver):
        self._name = name
        self._constraint = constraint
        self._installed_ver = installed_ver

    def __str__(self):
        return (f'Package {self._name} requires SONiC compatibility version {self._constraint} '
                f'while the installed version is {self._installed_ver}')


class PackageDependencyError(PackageInstallationError):
    """ Exception class for installation errors related to missing dependency. """

    def __init__(self, name, constraint, installed_version=None):
        self._name = name
        self._constraint = constraint
        self._installed_ver = installed_version

    def __str__(self):
        if self._installed_ver:
            return (f'Package {self._name} requires {self._constraint} '
                    f'but version {self._installed_ver} is installed')
        return f'Package {self._name} requires {self._constraint} but it is not installed'


class PackageConflictError(PackageInstallationError):
    """ Exception class for installation errors related to missing dependency. """

    def __init__(self, name, constraint, installed_ver):
        self._name = name
        self._constraint = constraint
        self._installed_ver = installed_ver

    def __str__(self):
        return (f'Package {self._name} conflicts with {self._constraint} but '
                f'version {self._installed_ver} is installed')

